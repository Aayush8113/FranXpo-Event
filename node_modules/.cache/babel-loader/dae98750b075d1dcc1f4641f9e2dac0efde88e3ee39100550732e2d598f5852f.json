{"ast":null,"code":"// import React, { useEffect, useState, useRef } from \"react\";\n// import \"./CountdownTimer.css\";\n\n// const CountdownTimer = () => {\n//     // State for the countdown timer\n//     const calculateTimeLeft = () => {\n//         const targetDate = new Date(\"2025-09-13T00:00:00\");\n//         const now = new Date();\n//         const difference = targetDate - now;\n\n//         let timeLeft = {};\n//         if (difference > 0) {\n//             timeLeft = {\n//                 days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n//                 hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n//                 minutes: Math.floor((difference / 1000 / 60) % 60),\n//                 seconds: Math.floor((difference / 1000) % 60),\n//             };\n//         } else {\n//             timeLeft = { expired: true };\n//         }\n//         return timeLeft;\n//     };\n\n//     const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n//     // State and Refs for drag functionality\n//     const [isDragging, setIsDragging] = useState(false);\n//     const [position, setPosition] = useState({ x: 20, y: 20 });\n//     const dragStart = useRef({ x: 0, y: 0 });\n//     const boxRef = useRef(null);\n\n//     // Effect for the countdown timer\n//     useEffect(() => {\n//         const timer = setInterval(() => {\n//             setTimeLeft(calculateTimeLeft());\n//         }, 1000);\n\n//         return () => clearInterval(timer);\n//     }, []);\n\n//     // Effect for handling drag-and-drop\n//     useEffect(() => {\n//         const handleMouseMove = (e) => {\n//             if (!isDragging) return;\n\n//             const newX = e.clientX - dragStart.current.x;\n//             const newY = e.clientY - dragStart.current.y;\n\n//             const boxWidth = boxRef.current.offsetWidth;\n//             const boxHeight = boxRef.current.offsetHeight;\n//             const viewportWidth = window.innerWidth;\n//             const viewportHeight = window.innerHeight;\n\n//             // Clamp the position to stay within the viewport\n//             const clampedX = Math.max(0, Math.min(newX, viewportWidth - boxWidth));\n//             const clampedY = Math.max(0, Math.min(newY, viewportHeight - boxHeight));\n\n//             setPosition({ x: clampedX, y: clampedY });\n//         };\n\n//         const handleMouseUp = () => {\n//             if (isDragging) {\n//                 setIsDragging(false);\n//             }\n//         };\n\n//         if (isDragging) {\n//             window.addEventListener('mousemove', handleMouseMove);\n//             window.addEventListener('mouseup', handleMouseUp);\n//         }\n\n//         // Cleanup function to remove event listeners\n//         return () => {\n//             window.removeEventListener('mousemove', handleMouseMove);\n//             window.removeEventListener('mouseup', handleMouseUp);\n//         };\n//     }, [isDragging]);\n\n//     const handleMouseDown = (e) => {\n//         setIsDragging(true);\n//         const rect = boxRef.current.getBoundingClientRect();\n//         dragStart.current = {\n//             x: e.clientX - rect.left,\n//             y: e.clientY - rect.top,\n//         };\n//         e.preventDefault(); // Prevent default browser behavior like text selection\n//     };\n\n//     // Google Calendar Link Generator\n//     const getGoogleCalendarLink = () => {\n//         const event = {\n//             title: \"Franmax Event 2025\",\n//             startDate: \"20250914T000000Z\",\n//             endDate: \"20250914T235900Z\",\n//             details: \"Join us for the exciting Franmax Event 2025!\",\n//             location: \"Taj Skyline, Ahmedabad, Taj Skyline Ahmedabad, Sankalp Square III, Opp. Saket 3, Sindhubhavan Road, nr. Neelkanth Green, Shilaj, Gujarat 380059\",\n//         };\n\n//         const baseUrl = \"https://calendar.google.com/calendar/render?action=TEMPLATE\";\n//         const url = `${baseUrl}&text=${encodeURIComponent(event.title)}&dates=${event.startDate}/${event.endDate}&details=${encodeURIComponent(event.details)}&location=${encodeURIComponent(event.location)}`;\n//         return url;\n//     };\n\n//     if (timeLeft.expired) {\n//         return (\n//             <div \n//                 ref={boxRef}\n//                 className={`countdown-box ${isDragging ? 'dragging' : ''}`}\n//                 style={{\n//                     left: `${position.x}px`,\n//                     top: `${position.y}px`,\n//                 }}\n//                 onMouseDown={handleMouseDown}\n//             >\n//                 <h3>Event Started!</h3>\n//                 <a\n//                     href={getGoogleCalendarLink()}\n//                     target=\"_blank\"\n//                     rel=\"noopener noreferrer\"\n//                     className=\"add-calendar-button\"\n//                 >\n//                     Add to Google Calendar\n//                 </a>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div \n//             ref={boxRef}\n//             className={`countdown-box ${isDragging ? 'dragging' : ''}`}\n//             style={{\n//                 left: `${position.x}px`,\n//                 top: `${position.y}px`,\n//             }}\n//             onMouseDown={handleMouseDown}\n//         >\n//             <h3>Countdown to Event</h3>\n//             <div className=\"countdown-timer\">\n//                 <div className=\"time-segment\">\n//                     <span>{String(timeLeft.days).padStart(2, '0')}</span>\n//                     <small>Days</small>\n//                 </div>\n//                 <div className=\"time-segment\">\n//                     <span>{String(timeLeft.hours).padStart(2, '0')}</span>\n//                     <small>Hours</small>\n//                 </div>\n//                 <div className=\"time-segment\">\n//                     <span>{String(timeLeft.minutes).padStart(2, '0')}</span>\n//                     <small>Minutes</small>\n//                 </div>\n//                 <div className=\"time-segment\">\n//                     <span>{String(timeLeft.seconds).padStart(2, '0')}</span>\n//                     <small>Seconds</small>\n//                 </div>\n//             </div>\n//             <a\n//                 href={getGoogleCalendarLink()}\n//                 target=\"_blank\"\n//                 rel=\"noopener noreferrer\"\n//                 className=\"add-calendar-button\"\n//             >\n//                 Add to Google Calendar\n//             </a>\n//         </div>\n//     );\n// };\n\n// export default CountdownTimer;","map":{"version":3,"names":[],"sources":["C:/Users/Nisarg/Desktop/React_Project/franxpo/src/components/CountdownTimer.jsx"],"sourcesContent":["// import React, { useEffect, useState, useRef } from \"react\";\r\n// import \"./CountdownTimer.css\";\r\n\r\n// const CountdownTimer = () => {\r\n//     // State for the countdown timer\r\n//     const calculateTimeLeft = () => {\r\n//         const targetDate = new Date(\"2025-09-13T00:00:00\");\r\n//         const now = new Date();\r\n//         const difference = targetDate - now;\r\n\r\n//         let timeLeft = {};\r\n//         if (difference > 0) {\r\n//             timeLeft = {\r\n//                 days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n//                 hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n//                 minutes: Math.floor((difference / 1000 / 60) % 60),\r\n//                 seconds: Math.floor((difference / 1000) % 60),\r\n//             };\r\n//         } else {\r\n//             timeLeft = { expired: true };\r\n//         }\r\n//         return timeLeft;\r\n//     };\r\n\r\n//     const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n\r\n//     // State and Refs for drag functionality\r\n//     const [isDragging, setIsDragging] = useState(false);\r\n//     const [position, setPosition] = useState({ x: 20, y: 20 });\r\n//     const dragStart = useRef({ x: 0, y: 0 });\r\n//     const boxRef = useRef(null);\r\n\r\n//     // Effect for the countdown timer\r\n//     useEffect(() => {\r\n//         const timer = setInterval(() => {\r\n//             setTimeLeft(calculateTimeLeft());\r\n//         }, 1000);\r\n\r\n//         return () => clearInterval(timer);\r\n//     }, []);\r\n\r\n//     // Effect for handling drag-and-drop\r\n//     useEffect(() => {\r\n//         const handleMouseMove = (e) => {\r\n//             if (!isDragging) return;\r\n\r\n//             const newX = e.clientX - dragStart.current.x;\r\n//             const newY = e.clientY - dragStart.current.y;\r\n            \r\n//             const boxWidth = boxRef.current.offsetWidth;\r\n//             const boxHeight = boxRef.current.offsetHeight;\r\n//             const viewportWidth = window.innerWidth;\r\n//             const viewportHeight = window.innerHeight;\r\n\r\n//             // Clamp the position to stay within the viewport\r\n//             const clampedX = Math.max(0, Math.min(newX, viewportWidth - boxWidth));\r\n//             const clampedY = Math.max(0, Math.min(newY, viewportHeight - boxHeight));\r\n\r\n//             setPosition({ x: clampedX, y: clampedY });\r\n//         };\r\n\r\n//         const handleMouseUp = () => {\r\n//             if (isDragging) {\r\n//                 setIsDragging(false);\r\n//             }\r\n//         };\r\n\r\n//         if (isDragging) {\r\n//             window.addEventListener('mousemove', handleMouseMove);\r\n//             window.addEventListener('mouseup', handleMouseUp);\r\n//         }\r\n\r\n//         // Cleanup function to remove event listeners\r\n//         return () => {\r\n//             window.removeEventListener('mousemove', handleMouseMove);\r\n//             window.removeEventListener('mouseup', handleMouseUp);\r\n//         };\r\n//     }, [isDragging]);\r\n\r\n//     const handleMouseDown = (e) => {\r\n//         setIsDragging(true);\r\n//         const rect = boxRef.current.getBoundingClientRect();\r\n//         dragStart.current = {\r\n//             x: e.clientX - rect.left,\r\n//             y: e.clientY - rect.top,\r\n//         };\r\n//         e.preventDefault(); // Prevent default browser behavior like text selection\r\n//     };\r\n\r\n//     // Google Calendar Link Generator\r\n//     const getGoogleCalendarLink = () => {\r\n//         const event = {\r\n//             title: \"Franmax Event 2025\",\r\n//             startDate: \"20250914T000000Z\",\r\n//             endDate: \"20250914T235900Z\",\r\n//             details: \"Join us for the exciting Franmax Event 2025!\",\r\n//             location: \"Taj Skyline, Ahmedabad, Taj Skyline Ahmedabad, Sankalp Square III, Opp. Saket 3, Sindhubhavan Road, nr. Neelkanth Green, Shilaj, Gujarat 380059\",\r\n//         };\r\n\r\n//         const baseUrl = \"https://calendar.google.com/calendar/render?action=TEMPLATE\";\r\n//         const url = `${baseUrl}&text=${encodeURIComponent(event.title)}&dates=${event.startDate}/${event.endDate}&details=${encodeURIComponent(event.details)}&location=${encodeURIComponent(event.location)}`;\r\n//         return url;\r\n//     };\r\n\r\n//     if (timeLeft.expired) {\r\n//         return (\r\n//             <div \r\n//                 ref={boxRef}\r\n//                 className={`countdown-box ${isDragging ? 'dragging' : ''}`}\r\n//                 style={{\r\n//                     left: `${position.x}px`,\r\n//                     top: `${position.y}px`,\r\n//                 }}\r\n//                 onMouseDown={handleMouseDown}\r\n//             >\r\n//                 <h3>Event Started!</h3>\r\n//                 <a\r\n//                     href={getGoogleCalendarLink()}\r\n//                     target=\"_blank\"\r\n//                     rel=\"noopener noreferrer\"\r\n//                     className=\"add-calendar-button\"\r\n//                 >\r\n//                     Add to Google Calendar\r\n//                 </a>\r\n//             </div>\r\n//         );\r\n//     }\r\n\r\n//     return (\r\n//         <div \r\n//             ref={boxRef}\r\n//             className={`countdown-box ${isDragging ? 'dragging' : ''}`}\r\n//             style={{\r\n//                 left: `${position.x}px`,\r\n//                 top: `${position.y}px`,\r\n//             }}\r\n//             onMouseDown={handleMouseDown}\r\n//         >\r\n//             <h3>Countdown to Event</h3>\r\n//             <div className=\"countdown-timer\">\r\n//                 <div className=\"time-segment\">\r\n//                     <span>{String(timeLeft.days).padStart(2, '0')}</span>\r\n//                     <small>Days</small>\r\n//                 </div>\r\n//                 <div className=\"time-segment\">\r\n//                     <span>{String(timeLeft.hours).padStart(2, '0')}</span>\r\n//                     <small>Hours</small>\r\n//                 </div>\r\n//                 <div className=\"time-segment\">\r\n//                     <span>{String(timeLeft.minutes).padStart(2, '0')}</span>\r\n//                     <small>Minutes</small>\r\n//                 </div>\r\n//                 <div className=\"time-segment\">\r\n//                     <span>{String(timeLeft.seconds).padStart(2, '0')}</span>\r\n//                     <small>Seconds</small>\r\n//                 </div>\r\n//             </div>\r\n//             <a\r\n//                 href={getGoogleCalendarLink()}\r\n//                 target=\"_blank\"\r\n//                 rel=\"noopener noreferrer\"\r\n//                 className=\"add-calendar-button\"\r\n//             >\r\n//                 Add to Google Calendar\r\n//             </a>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default CountdownTimer;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}